package com.lhf.javacommonlib.leetcode.bit;

import org.junit.Assert;
import org.junit.Test;

/**
 * @author JoshuaLu
 * @date 2021/3/31 16:02
 */
public class ReverseBits {
    /*
    https://leetcode-cn.com/problems/reverse-bits/
    190. 颠倒二进制位
    颠倒给定的 32 位无符号整数的二进制位。

    提示：

    请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
    在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。

    进阶:
    如果多次调用这个函数，你将如何优化你的算法？

    示例 1：
        输入: 00000010100101000001111010011100
        输出: 00111001011110000010100101000000
        解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
             因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
    示例 2：
        输入：11111111111111111111111111111101
        输出：10111111111111111111111111111111
        解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
             因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。

    提示：
        输入是一个长度为 32 的二进制字符串
    */

    @Test
    public void test() {
        int n, exp, res;

        // 示例 1
        n = 43261596;
        exp = 964176192;
        res = reverseBits(n);
        Assert.assertEquals(exp, res);

    }

    // you need treat n as an unsigned value
    public int reverseBits(int n) {
//        return reverseBits1(n);
        return reverseBits2(n);
    }

    public int reverseBits1(int n) {
        // 一位一位操作
        int res = 0;
        for (int i = 0; i < 32; i++) {
            // 将n的最后一位，添加到res的末尾
            res = (res << 1) | (n & 1);
            // n右移一位
            n = n >> 1;
        }
        return res;
    }

    /**
     * 示例 1
     * <p>
     * n = 0000 0010 1001 0100 0001 1110 1001 1100 // 初始值
     * n = 0001 1110 1001 1100 0000 0010 1001 0100 // 整个32位中，高16位与低16位交换
     * n = 1001 1100 0001 1110 1001 0100 0000 0010 // 每16位中，高8位与低8位交换
     * n = 1100 1001 1110 0001 0100 1001 0010 0000 // 每8位中，高4位与低4位交换
     * n = 0011 0110 1011 0100 0001 0110 1000 0000 // 每4位中，高2位与低2位交换
     * n = 0011 1001 0111 1000 0010 1001 0100 0000 // 每2位中，高1位与低1位交换
     */
    public int reverseBits2(int n) {
        // 分组交换， 注意要使用 无符号右移 >>>
        n = (n >>> 16) | (n << 16);// 整个32位中，高16位与低16位交换
        n = ((n & 0xff00ff00) >>> 8) | ((n & 0x00ff00ff) << 8);// 每16位中，高8位与低8位交换
        n = ((n & 0xf0f0f0f0) >>> 4) | ((n & 0x0f0f0f0f) << 4);// 每8位中，高4位与低4位交换
        n = ((n & 0xcccccccc) >>> 2) | ((n & 0x33333333) << 2);// 每4位中，高2位与低2位交换
        n = ((n & 0xaaaaaaaa) >>> 1) | ((n & 0x55555555) << 1);// 每2位中，高1位与低1位交换
        return n;
    }
}
