@startuml
title Glide into() 流程

RequestBuilder -> RequestBuilder: into(ImageView view)

RequestBuilder -> ImageViewTargetFactory: buildImageViewTarget(view, transcodeClass)
note right
view:传进来的ImageView控件
transcodeClass:获取到的图片要转换的类型（Bitmap.class、Drawable.class等）
end note

RequestBuilder <- ImageViewTargetFactory: return ViewTarget<ImageView, X>
note right: X根据上面传进来的transcodeClass找到对应的类型（Bitmap、Drawable等）

RequestBuilder -> RequestBuilder: into(ViewTarget target)

RequestBuilder -> RequestBuilder: buildRequest
note right: 根据传进来的参数，创建Request对象

RequestBuilder -> RequestTracker: runRequest(Request request)
RequestTracker -> SingleRequest: request.begin()
SingleRequest -> SingleRequest: onSizeReady(width, height)
SingleRequest -> Engine: engine.load()
note right
这里开始真正的请求图片
包括从缓存获取和从网络请求
内存缓存中没有获取到则调用waitForExistingOrStartNewJob()
end note

Engine -[#blue]> Engine: loadFromMemory()
note right: 从内存缓存中获取数据
Engine -[#blue]> Engine: waitForExistingOrStartNewJob()
note right: 从硬盘缓存中获取数据、从网络请求数据

Engine -> SingleRequest: onResourceReady
note right: 数据获取成功后，会回调到该方法
SingleRequest -> SingleRequest: onResourceReady
SingleRequest -> ImageViewTarget: onResourceReady
ImageViewTarget -> ImageViewTarget: setResourceInternal
ImageViewTarget -[#blue]> ImageViewTarget: setResource
note right
这里最终会调用到ImageViewTarget的具体子类，
将资源设置给ImageView
end note

@enduml